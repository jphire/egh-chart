{
  "name": "modmod",
  "version": "0.1.2",
  "author": {
    "name": "Stephen Sawchuk",
    "email": "sawchuk@gmail.com",
    "url": "http://sawchuk.me"
  },
  "description": "make require-ing modules less require-y.",
  "repository": {
    "type": "git",
    "url": "stephenplusplus/modmod"
  },
  "license": "MIT",
  "keywords": [
    "require",
    "module",
    "exports"
  ],
  "readme": "# modmod\n> make `require`-ing modules less require-y.\n\n\n## Getting Started\n\n```bash\n$ npm install --save modmod\n```\n\nThen, change your code from:\n\n```js\nvar fs = require('fs');\nvar chalk = require('chalk');\nvar wiredep = require('wiredep');\n\nfs.writeFile('results.json', wiredep(), function (err) {\n  if (err) {\n    console.log(chalk.red.bold(err));\n  }\n});\n```\n\n...to...\n\n```js\nvar $ = require('modmod')('fs', 'chalk', 'wiredep');\n\n$.fs.writeFile('results.json', $.wiredep(), function (err) {\n  if (err) {\n    console.log($.chalk.red.bold(err));\n  }\n});\n```\n\n\n## Local vs External Modules\n`modmod` is only intended to be used with external (npm-land) modules, and Node's native modules (`http`, `fs`, etc.). If you would like to namespace your local modules, you are welcome to assign additional objects on top of the object `modmod` returns. As an example:\n\n```js\nvar $ = require('modmod')('fs', 'chalk', 'wiredep');\n\n$.local = {\n  helpers: require('./helpers'),\n  utils: require('./utils')\n};\n```\n\n\n## Why use `modmod`?\n\nIt's up to you. There's nothing wrong with the current system of multiple var declarations, and having too many isn't a node problem. Regardless, you may still consider it useful to namespace your dependencies under a name of your choosing, such as `M` or `$`, freeing up those \"global\" variables for use without conflicts.\n\n\n## License\n\nMIT Â© [Stephen Sawchuk](http://sawchuk.me)\n",
  "readmeFilename": "readme.md",
  "_id": "modmod@0.1.2",
  "_from": "modmod@^0.1.1"
}
